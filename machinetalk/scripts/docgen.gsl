.###  This whole script runs in template mode.
.#
.template 1
.output "generated/$(class.module:Pascal,lower)/$(class.name:Pascal,lower).md"
.
.mtname = "machinetalk-protobuf.md"
.
.macro recurse_field (scp, msg, indent)
.  for my.scp.field
.    if (defined(field.message))
$(my.indent) The [$(my.msg:)]($(mtname)#pb.$(my.msg:)) message $(REQUIREMENT) carry a [$(field.message:)]($(mtname)#pb.$(field.message:)) message. <br />
.       recurse_field(field, field.message, "&nbsp;&nbsp;" + my.indent)
.    else
$(my.indent) Each [$(my.msg:)]($(mtname)#pb.$(my.msg:)) message $(REQUIREMENT) carry a [$(name:)]($(mtname)#pb.$(my.msg:).$(name:)) field. <br />
.    endif
.  endfor
.  for my.scp.oneof
$(my.indent) Each [$(my.msg:)]($(mtname)#pb.$(my.msg:)) message $(REQUIREMENT) carry one of the following fields <br />
.    for field
$(my.indent) &nbsp;&nbsp;[$(name:)]($(mtname)#pb.$(my.msg:).$(name:)) <br />
.    endfor
.  endfor
.endmacro
.
.for include
.  class.load_file("models/" + filename)
.endfor
.
# $(name:)
$(class:no,left)
.
## Messages
.for message where (name <> "*")
<a name="msg_$(name:c)" />
### $(NAME)
$(message:no,left)
.
.- output all response messages
.  if (count(response) > 0)
#### Possible Responses
.    for response
[$(NAME)](#msg_$(name:c)) <br />
.    endfor
.  endif
.
.- find which messages this responds to
.  for class.message as msg
.    for response
.       if (name = message.name)
.         copy msg to message as responseto
.       endif
.    endfor
.  endfor
.
.  if (count(responseto) > 0)
#### Response to
.    for responseto
[$(NAME)](#msg_$(name:c)) <br />
.    endfor
.  endif
.
.  if (count(field) > 0)
#### Data Fields
.    recurse_field(message, "Container", "")
.  endif
.endfor
.
.for class
## $(class.name:)
$(class:no,left)
## State Machine
![State Machine]($(class.name:Pascal,lower).dot.png)
.endfor
.
.endtemplate
