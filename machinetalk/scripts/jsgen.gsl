.###  This whole script runs in template mode.
.#
.template 1
.gsl from "scripts/prepare_fsm.gsl"
.output "generated/$(class.module:Pascal,lower)/$(class.name:Pascal,lower).js"
var EventEmitter = require('events').EventEmitter;
var StateMachine = require('javascript-state-machine').StateMachine;
var util = require('util');
var zmq = require('zmq');
var _ = require('underscore');
var protobufMessage = require('machinetalk-protobuf').message;
var Container = protobufMessage.Container;
var ContainerType = protobufMessage.ContainerType;
.for socket where (defined(socket.class))
var $(socket.class:lower,Pascal) = require('../$(socket.module:Pascal,lower)/$(socket.class:Pascal,lower).js')
.endfor

function $(class.name:lower,Pascal)(debugname, debuglevel) {
    this.debuglevel = typeof debuglevel !== 'undefined' ? debuglevel : 0;
    this.debugname = typeof debugname !== 'undefined' ? debugname : 0;
    this.errorString = '';
.
.for socket where (!defined(socket.class))
    this.socket = null;
.endfor
.
.for socket

    // $(Name)
.  if defined(socket.class)
    this.$(name)Channel = new $(socket.class:lower,Pascal)();
    this.$(name)Channel.debugname = debugname + ' $(name:)';
.    if (count(state) > 0)
    this.$(name)Channel.on('stateChanged', this.$(name)ChannelStateChanged.bind(this));
.    endif
.    if (count(incoming) > 0)
    this.$(name)Channel.on('socketMessageReceived', this._$(name)MessageReceived.bind(this));
.    endif
.  else
    this.$(name)Uri = '';
.    if (type = "SUB")
    this.$(name)Topics = [];
.    endif
.  endif
    // more efficient to reuse protobuf messages
.  if (count(incoming) > 0)
    this.$(name)Rx = new Container();
.  endif
.  if (count(outgoing) > 0)
    this.$(name)Tx = new Container();
.  endif
.endfor
.
.for heartbeat

    // $(Name)
    this.$(name)Period = $(period);
    this.$(name)ErrorCount = 0;
    this.$(name)ErrorThreshold = $(error_threshold);
    this.$(name)Timer = null;
    this.$(name)Active = false;
.endfor

    // callbacks
.for socket
.  if (count(incoming) > 0)
    this.on('$(name)MessageReceived', function () {});
.  endif
.endfor
    this.on('stateChanged', function () {});
    this.started = false;

.for fsm
    // fsm
    this.fsm = StateMachine.create({
        initial: '$(initial:c)',
        events: [
.  for state
.    for event
           {name: '$(name:c)', from: '$(state.name:c)', to: '$(next:c)'},
.    endfor
.  endfor
    ]});

.  for state
    this.fsm.on$(name:c) = this.onFsm$(name:Pascal).bind(this);
.    for event
.-     make sure we assign only once
.      if (!defined(on_$(name:c)))
.        on_$(name:c) = 1
    this.fsm.on$(name:c) = this.onFsm$(name:Pascal).bind(this);
.      endif
.    endfor
.  endfor
.endfor
}
util.inherits($(class.name:lower,Pascal), EventEmitter);
.
.for fsm
.  for state

$(class.name:lower,Pascal).prototype.onFsm$(name:Pascal) = function(event, from, to) {
    if (this.debuglevel > 0)
        console.log(this.debugname + ': state $(NAME)');

    this.emit('stateChanged', '$(name:c)');
};
.    for event
.-     make sure we assign only once
.      if (!defined(fsm_on_$(name:c)))
.        fsm_on_$(name:c) = 1

$(class.name:lower,Pascal).prototype.onFsm$(name:Pascal) = function(event, from, to) {
    if (this.debuglevel > 0)
        console.log(this.debugname + ': event $(NAME)');
.      for action
    this.$(name:Camel)();
.      endfor
};
.      endif
.    endfor
.  endfor
.endfor
.
.for slot

$(class.name:lower,Pascal).prototype.$(name:Camel) = function() {
    console.log('WARNING: slot $(name) unimplemented');
};
.endfor
.
.for socket
.  if (type = "SUB")

$(class.name:lower,Pascal).prototype.add$(Name)Topic = function(name) {
.    if defined(socket.class)
    this.$(name)Channel.addSocketTopic(name);
.    else
    this.$(name)Topics.push(name);
.    endif
};

$(class.name:lower,Pascal).prototype.remove$(Name)Topic = function(name) {
.    if defined(socket.class)
    this.$(name)Channel.removeSocketTopic(name);
.    else
    this.$(name)Topics.pop(name);
.    endif
};

$(class.name:lower,Pascal).prototype.clear$(Name)Topics = function() {
.    if defined(socket.class)
    this.$(name)Channel.clearSocketTopics();
.    else
    this.$(name)Topics = [];
.    endif
};
.  endif
.
.  if !defined(socket.class)

$(class.name:lower,Pascal).prototype.connectSockets = function() {
    this.socket = zmq.socket('$(type)');
    this.socket.setsockopt(zmq.ZMQ_LINGER, 0);
    this.socket.connect(this.socketUri);
.    if (count(incoming) > 0)
    this.socket.on('message', this._socketMessageReceived.bind(this));
.    endif

.    if (type = "SUB")
    for (var i = 0; i < this.socketTopics.length; ++i) {
        this.socket.subscribe(this.socketTopics[i]);
    }
.    endif
};

$(class.name:lower,Pascal).prototype.disconnectSockets = function() {
    if (this.socket != null) {
        this.socket.close();
        this.socket = null;
    }
};
.  endif
.endfor

$(class.name:lower,Pascal).prototype.start = function() {
    if (this.started)
        return;
    this.fsm.connect();
    this.started = true;
};

$(class.name:lower,Pascal).prototype.stop = function() {
    if (!this.started)
        return;
    this.fsm.diconnect();
    this.started = false;
};
.
.for socket where defined(socket.class)

$(class.name:lower,Pascal).prototype.start$(Name)Channel = function() {
    this.$(name)Channel.socketUri = this.$(name)Uri;
    this.$(name)Channel.start();
};

$(class.name:lower,Pascal).prototype.stop$(Name)Channel = function() {
    this.$(name)Channel.stop();
};
.endfor
.
.for heartbeat

$(class.name:lower,Pascal).prototype.$(name)TimerTick = function() {
    this.$(name)Timer = null; // timer is dead on tick

    if (this.debuglevel > 0) {
        console.log(this.debugname + ' timer tick');
    }

    this.$(name)ErrorCount += 1;
    if (this.$(name)ErrorCount > this.$(name)ErrorThreshold) {
.  for timeout
.    for event
        if (this.fsm.current == '$(when:c)') {
            this.fsm.$(name:c)();
        }
.    endfor
.  endfor
    }
    else {
.  for tick
.    for event
        if (this.fsm.current == '$(when:c)') {
            this.fsm.$(name:c)();
        }
.    endfor
.  endfor
    }
};

$(class.name:lower,Pascal).prototype.reset$(Name)Error = function() {
    this.$(name)ErrorCount = 0;
};

$(class.name:lower,Pascal).prototype.reset$(Name)Timer = function() {
    if (!this.$(name)Active)
        return;

    if (this.$(name)Timer != null) {
        clearTimeout(this.$(name)Timer);
        this.$(name)Timer = null;
    }

    if (this.$(name)Period > 0) {
        this.$(name)Timer = setTimeout(this.$(name)TimerTick.bind(this), this.$(name)Period);
    }

    if (this.debuglevel > 0)
        console.log(this.debugname + ' timer reset');
};

$(class.name:lower,Pascal).prototype.start$(Name)Timer = function() {
    this.$(name)Active = true;
    this.reset$(Name)Timer();
};

$(class.name:lower,Pascal).prototype.stop$(Name)Timer = function() {
    this.$(name)Active = false
    if (this.$(name)Timer != null) {
        clearTimeout(this.$(name)Timer);
        this.$(name)Timer = null;
    }
};
.endfor
.
.for socket where (count(incoming) > 0)

/** process all messages received on $(name:) */
.  if (type = "SUB")
$(class.name:lower,Pascal).prototype._$(name)MessageReceived = function(topic, rx) {
.  else
$(class.name:lower,Pascal).prototype._$(name)MessageReceived = function(rx) {
.  endif
.  if (!defined(socket.class))
    rx = Container.decode(rx);
    if (this.debuglevel > 0) {
        console.log(this.debugname + ' received message');
        if (this.debuglevel > 1) {
            console.log(rx);
        }
    }
.  endif
.
.  for incoming
.    if (defined(ignore) | (count(event) > 0) | defined(public))

.      if (name <> "*")
.        ws = "    "
    // react to $(name) message
    if (rx.type == ContainerType.MT_$(NAME:c)) {
.      else
.        ws = ""
    // react to any incoming message
.      endif
.
.      for response
    $(ws)this.send$(name:Pascal)();
.      endfor
.
.      for pparams
    $(ws)if (rx.pparams != null) {
        $(ws)interval = rx.pparams.keepalive_timer;
        $(ws)this.heartbeatPeriod = interval;
    $(ws)}
.      endfor
.
.      for note
    $(ws)// update error string with note
    $(ws)this.errorString = ''
    $(ws)for (var i = 0; i < rx.note.length; ++i) {
        $(ws)this.errorString += rx.note[i] + '\\n';
    $(ws)}
.      endfor
.
.      for event
    $(ws)if (this.fsm.current == '$(when:c)')
        $(ws)this.fsm.$(name:c)();
.      endfor
.
.      if (defined(public) & public = "true")
.        if (socket.type = "SUB")
    $(ws)this.$(name:c)Received(topic, rx)
.        else
    $(ws)this.$(name:c)Received(rx)
.        endif
.      endif
.
.      if (defined(ignore) & ignore = "true")
    $(ws)return; // $(incoming.name:) is uninteresting
.      endif
.      if (name <> "*")
    }
.      endif
.    endif
.  endfor

.  if (type = "SUB")
    this.emit('$(name)MessageReceived', topic, rx);
.  else
    this.emit('$(name)MessageReceived', rx);
.  endif
};
.
.
.  for incoming where (defined(public) & (public = "true"))

.    if (socket.type = "SUB")
$(class.name:lower,Pascal).prototype.$(name:Camel)Received = function(topic, rx) {
.    else
$(class.name:lower,Pascal).prototype.$(name:Camel)Received = function(rx) {
.    endif
    console.log('SLOT $(name:) unimplemented');
}
.  endfor
.
.endfor
.
.for socket where (count(outgoing) > 0)

.  if (type = "PUB")
$(class.name:lower,Pascal).prototype.send$(name:Pascal)Message = function(topic, type, tx)
.  else
$(class.name:lower,Pascal).prototype.send$(name:Pascal)Message = function(type, tx)
.  endif
{
.  if defined(socket.class)
.    if (type = "PUB")
    this.$(name)Channel.sendSocketMessage(topic, type, tx)
.    else
    this.$(name)Channel.sendSocketMessage(type, tx)
.    endif
.  else
    tx.type = type
    if (this.debuglevel > 0) {
        console.log(this.debugname + ' sending message: ' + msg_type);
        if (this.debuglevel > 1)
            console.log(tx);
    }

.    if (type = "PUB")
    this.socket.send([topic, Container.encode(tx)]);
.    else
    this.socket.send(Container.encode(tx));
.    endif
    tx = new Container();
.  endif
.
.  for outgoing where ((count(event) > 0))
.    if (name <> "*")
.      ws = "    "
    if (type == ContainerType.MT_$(NAME:c))
    {
.    else
.      ws = ""
.    endif
.
.    for event
    $(ws)if (this.fsm.current == '$(when:c)')
        $(ws)this.fsm.$(name:c)();
.    endfor
.    if (name <> "*")
    }
.    endif
.  endfor
};
.endfor
.
.for socket
.  for outgoing where (name <> "*")

.    if (socket.type = "PUB")
.      if defined(public)
$(class.name:lower,Pascal).prototype.send$(name:Pascal) = function(topic, tx) {
.      else
$(class.name:lower,Pascal).prototype.send$(name:Pascal) = function(topic) {
    tx = this.$(socket.name)Tx;
.      endif
    this.send$(socket.Name)Message(topic, ContainerType.MT_$(NAME:c), tx);
};
.    else
.      if defined(public)
$(class.name:lower,Pascal).prototype.send$(name:Pascal) = function(tx) {
.      else
$(class.name:lower,Pascal).prototype.send$(name:Pascal) = function() {
    tx = this.$(socket.name)Tx
.      endif
    this.send$(socket.Name)Message(ContainerType.MT_$(NAME:c), tx);
};
.    endif
.  endfor
.endfor
.
.for socket where (defined(socket.class) & (count(state) > 0))

$(class.name:lower,Pascal).prototype.$(name)ChannelStateChanged = function(state) {
.  for state where (count(event) > 0)

    if (state == '$(name:c)') {
.     for event
        if (this.fsm.current == '$(when:c)')
            this.fsm.$(name:c)();
.     endfor
    }
.  endfor
};
.endfor

module.exports = $(class.name:lower,Pascal);
.endtemplate
