.###  This whole script runs in template mode.
.#
.template 1
.output "$(class.name).py"
import zmq
import threading
from fysom import Fysom

from machinetalk.protobuf.types_pb2 import *
from machinetalk.protobuf.message_pb2 import Container


class $(class.name:)(object):
    def __init__(self, debuglevel=0, debugname='$(class.name)'):
        self.debuglevel = debuglevel
        self.debugname = debugname
        self.thread = None
        self.shutdown = threading.Event()
        self.tx_lock = threading.Lock()
        self.timer_lock = threading.Lock()

        # ZeroMQ
        context = zmq.Context()
        context.linger = 0
        self.context = context

        # Socket
        self.uri = ''
        self.service = ''
.for socket
        self.socket = self.context.socket(zmq.$(TYPE))
.endfor
        self.socket.setsockopt(zmq.LINGER, 0)
        # more efficient to reuse a protobuf message
        self.rx = Container()
        self.tx = Container()

.for heartbeat
        # $(Name)
        self.$(name)_period = $(period)
        self.$(name)_error_count = 0
        self.$(name)_error_threshold = $(error_threshold)
        self.$(name)_timer = None

.endfor
        self.message_received_cb = None
        self.state_changed_cb = None
        self.started = False

.for fsm
        # fsm
        self.fsm = Fysom({'initial': '$(initial)',
                          'events': [
.  for state
.    for event
                            {'name': '$(name)', 'src': '$(state.name)', 'dst': '$(next)'},
.    endfor
.  endfor
                          ]})

.  for state
.    for event
.-     make sure we assign only once
.      if (!defined(on_$(name:c)))
.        on_$(name:c) = 1
        self.fsm.on$(name:c) = self.on_fsm_$(name:c)
.      endif
.    endfor
.  endfor
.  for state
.    for event
.-     make sure we assign only once
.      if (!defined(fsm_on_$(name:c)))
.        fsm_on_$(name:c) = 1

    def on_fsm_$(name:c)(self, e):
        print('[%s]: $(name)' % self.debugname)
.      for action
        self.$(name:c)()
.      endfor
        return True
.      endif
.    endfor
.  endfor
.endfor

    def socket_worker(self):
        poll = zmq.Poller()
        poll.register(self.socket, zmq.POLLIN)

        while not self.shutdown.is_set():
            s = dict(poll.poll(200))
            if self.socket in s:
                self.process_socket()

    def process_socket(self):
        msg = self.socket.recv()
        self.rx.ParseFromString(msg)
        if self.debuglevel > 0:
            print('[%s] received message' % self.debugname)
            if self.debuglevel > 1:
                print(self.rx)
.  for class.response
.    for action

        self.$(name:c)()
.    endfor
.    for event

        if self.fsm.isstate('$(when)'):
            self.fsm.$(name)()

.    endfor
.    if (defined(ignore) & ignore = "true")

        if self.rx.type == MT_$(response.NAME:c): # $(response.name) is uninteresting
            return
.    endif
.  endfor

        self.message_received_cb(self.rx)

    def start(self):
        if self.started:
            return
        self.started = True
        self.fsm.connect()  # todo
        self.shutdown.clear()
        self.thread = threading.Thread(target=self.socket_worker)
        self.thread.start()

    def stop(self):
        if not self.started:
            return
        self.started = False
        self.fsm.disconnect()
        self.shutdown.set()
        self.thread.join()
        self.thread = None

    def connect_sockets(self):
        self.service = self.uri  # make sure to save the uri we connected to
        self.socket.connect(self.service)
        return True

    def disconnect_sockets(self):
        self.socket.disconnect(self.service)

.for heartbeat
    def $(name)_tick(self):
        if self.debuglevel > 0:
            print('[%s] $(name) tick' % self.debugname)
.  for tick
.    for action
        self.$(name:c)()
.    endfor
.  endfor
        self.$(name)_error_count += 1

        if self.$(name)_error_count > self.$(name)_error_threshold:
.  for timeout
.    for event
            if self.fsm.isstate('$(when)'):
                self.fsm.$(name)()
.    endfor
.  endfor

        #self.timer_lock.acquire()
        #self.$(name)_timer = threading.Timer(self.$(name)_period / 1000,
        #                                     self.$(name)_tick)
        #self.$(name)_timer.start()  # rearm timer
        #self.timer_lock.release()

    def reset_$(name)(self):
        self.$(name)_error_count = 0

    def refresh_$(name)(self):
        self.timer_lock.acquire()
        if self.$(name)_timer:
            self.$(name)_timer.cancel()
            self.$(name)_timer = None

        if self.$(name)_period > 0:
            self.$(name)_timer = threading.Timer(self.$(name)_period / 1000,
                                                 self.$(name)_tick)
            self.$(name)_timer.start()
        self.timer_lock.release()
        if self.debuglevel > 0:
            print('[%s] $(name) updated' % self.debugname)

    def stop_$(name)(self):
        self.timer_lock.acquire()
        if self.$(name)_timer:
            self.$(name)_timer.cancel()
            self.$(name)_timer = None
        self.timer_lock.release()
.endfor

    def send_message(self, msg_type, tx):
        with self.tx_lock:
            tx.type = msg_type
            if self.debuglevel > 0:
                print('[%s] sending message: %s' % (self.debugname, msg_type))
                if self.debuglevel > 1:
                    print(str(tx))

            self.socket.send(tx.SerializeToString(), zmq.NOBLOCK)
            tx.Clear()
.for message
.  for action
.    if (message.name = "*")

        self.$(action.name:c)()
.    else

        if msg_type == MT_$(message.NAME:c):
            self.$(action.name:c)()
.    endif
.  endfor
.endfor
.for message where (name <> "*")

    def send_$(name:c)(self):
        self.send_message(MT_$(NAME:c), self.tx)
.endfor

.endtemplate
